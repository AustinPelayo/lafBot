
#include <SoftwareSerial.h>
#include <ArduinoBlue.h>
#include <math.h>

// Bluetooth TX -> Arduino D8
const int BLUETOOTH_TX = 8;
// Bluetooth RX -> Arduino D7
const int BLUETOOTH_RX = 7;

SoftwareSerial bluetooth(BLUETOOTH_TX, BLUETOOTH_RX);
ArduinoBlue phone(bluetooth); // pass reference of bluetooth object to ArduinoBlue constructor

//Initializing Motor Pins
int RPIN1 = 3;
int RPIN2 = 5;
int LPIN1 = 6;
int LPIN2 = 9;

//Controls Setup
int throttle, steering, sliderVal, button, sliderId;

void setup() {
  // Begin the Serial at 9600 Baud
  Serial.begin(9600);
  bluetooth.begin(9600);
  delay(100);

  //Declare motor pins as an output
  pinMode(RPIN1, OUTPUT);
  pinMode(RPIN2, OUTPUT);
  pinMode(LPIN1, OUTPUT);
  pinMode(LPIN2, OUTPUT);

  Serial.println("setup complete");
}

/*void serialWrite(String input)
  {
  if (input != "")
  {
    Serial.println("Your String: " + input);

    for (int i = 0; i < input.length(); i++) {

      char myChar = input.charAt(i);

      for (int i = 7; i >= 0; i--) {
        byte bytes = bitRead(myChar, i);
        Serial.print(bytes, BIN);
      }
      byte buffer[input.length() + 1];
      Serial.write(buffer, 10);


    }


    Serial.print("You typed: " );
    Serial.println(input);

  }
  delay(1000);

  }*/

String bleStr()
{
  String str = phone.getText();
  if (str != "")
    Serial.println(str);
  return str;
}

int getButtonID()
{
  button = phone.getButton();
  if (button != -1) {
    Serial.print("Button: ");
    Serial.println(button);
    return button;
  }
  return -1;
}


void moveForward()
{
  Serial.println("Going Forward");

  digitalWrite(RPIN1, HIGH);
  digitalWrite(RPIN2, LOW);
  digitalWrite(LPIN1, HIGH);
  digitalWrite(LPIN2, LOW);
  delay(3000);
}

void moveBackward()
{
  Serial.println("Going backwards");

  digitalWrite(RPIN1, LOW);
  digitalWrite(RPIN2, HIGH);
  digitalWrite(LPIN1, LOW);
  digitalWrite(LPIN2, HIGH);
  delay(3000);
}

void moveLeft()
{
  Serial.println("Going Left");

  digitalWrite(RPIN1, LOW);
  digitalWrite(RPIN2, LOW);
  digitalWrite(LPIN1, LOW);
  digitalWrite(LPIN2, HIGH);
  delay(3000);
}

void moveRight()
{
  Serial.println("Going Right");

  digitalWrite(RPIN1, LOW);
  digitalWrite(RPIN2, HIGH);
  digitalWrite(LPIN1, LOW);
  digitalWrite(LPIN2, LOW);
  delay(3000);
}

void slowInToStop()
{
  for (int i = 255; i >= 0; i--)
  {
    analogWrite(RPIN1, i);
    analogWrite(RPIN2, i);
    analogWrite(LPIN1, i);
    analogWrite(LPIN2, i);
    delay(5);
  }
}

void moveToFullSpeed()
{
  for (int i = 0; i < 255; i++)
  {
    analogWrite(RPIN1, i);
    analogWrite(RPIN2, i);
    analogWrite(LPIN1, i);
    analogWrite(LPIN2, i);
    delay(5);
  }
}

void joyStickControl2()
{
  throttle = phone.getThrottle();
  steering = phone.getSteering();


  int xSpeed = map(steering, 0, 99, -100, 100);
  int ySpeed = map(throttle, 0, 99, -100, 100);
  int deadZone = 5;


  int xyABS = sqrt(ySpeed * ySpeed + xSpeed * xSpeed);
  
Serial.println("xyABS");

Serial.println(xyABS);
  int motorSpeed = xyABS;

Serial.println("motorSpeed");
  Serial.println(motorSpeed);
  
Serial.println("xSpeed");
  Serial.println(xSpeed); //-19
  
Serial.println("ySpeed");
  Serial.println(ySpeed); //255

  //forward right
  if ((ySpeed > deadZone && xSpeed > deadZone))
  {
    Serial.println("Foward Right");
    analogWrite(LPIN1, motorSpeed);
    analogWrite(RPIN1,  motorSpeed - xSpeed);
    analogWrite(LPIN2, 0);
    analogWrite(RPIN2, 0);
  }

  // forward left
  else if ((ySpeed > deadZone && xSpeed < -deadZone))
  {
    Serial.println("Foward Left");
    analogWrite(LPIN1, motorSpeed + xSpeed);
    analogWrite(RPIN1,  motorSpeed);
    analogWrite(LPIN2, 0);
    analogWrite(RPIN2, 0);
  }

  // forward
  else if ((ySpeed > deadZone && xSpeed > -deadZone && xSpeed < deadZone))
  {
  
Serial.println("Moving Forwards");
  analogWrite(RPIN1, motorSpeed);
  analogWrite(RPIN2, 0);
  analogWrite(LPIN1, motorSpeed);
  analogWrite(LPIN2, 0);
  }

  //back right
  else if ((ySpeed < -deadZone && xSpeed > deadZone))
  {
    Serial.println("Moving Back Right");
    analogWrite(LPIN1, 0);
    analogWrite(RPIN1, 0);

    analogWrite(LPIN2, motorSpeed);
    analogWrite(RPIN2, motorSpeed + xSpeed);
  }

  // back left
  else if ((ySpeed < -deadZone && xSpeed < -deadZone))
  {


        Serial.println("Moving Back Left");
    analogWrite(LPIN1, 0);
    analogWrite(RPIN1, 0);

    analogWrite(LPIN2, motorSpeed - xSpeed);
    analogWrite(RPIN2, motorSpeed);
  }

  // backwards
  else if ((ySpeed < -deadZone && xSpeed > -deadZone && xSpeed < deadZone))
  {
  
Serial.println("Moving Backwards");
  analogWrite(RPIN1, 0);
  analogWrite(RPIN2, motorSpeed);
  analogWrite(LPIN1, 0);
  analogWrite(LPIN2, motorSpeed);
  }
  else
  {
    analogWrite(LPIN1, 0);
    analogWrite(RPIN1, 0);

    analogWrite(LPIN2, 0);
    analogWrite(RPIN2, 0);
  }

}




void loop() {
  //serialWrite(ble());

  //Joy Stick Access
  //joyStickControl();
  joyStickControl2();
  /*   //Button Access
      int x = getButtonID();

      //Forward
      if (bleStr().equals("forward") || bleStr().equals("Forward") || x == 1)
      {
      // moveToFullSpeed();
       moveForward();
      // slowInToStop();
      }

      //Backward
      if (bleStr().equals("backward") || bleStr().equals("Backward") || x == 2)
      {
      // moveToFullSpeed();
       moveBackward();
      // slowInToStop();
      }

      //Left
      if (bleStr().equals("left") || bleStr().equals("Left") || x == 3)
      {
      // moveToFullSpeed();
       moveLeft();
      // slowInToStop();
      }

      //Right
      if (bleStr().equals("right") || bleStr().equals("Right") || x == 4)
      {
      //  moveToFullSpeed();
       moveRight();
      // slowInToStop();
      }

      // OFF after cmd
      digitalWrite(RPIN1, LOW);
      digitalWrite(RPIN2, LOW);
      digitalWrite(LPIN1, LOW);
      digitalWrite(LPIN2, LOW);
  */
}

